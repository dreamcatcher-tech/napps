ðŸ“¦ /
â”œâ”€ ðŸ“‚ src
â”‚  â”œâ”€ ðŸ“„ batched-pull.ts
â”‚  â”‚   â„¹ Repeatedly pulls and commits MoneyWorks records in batches
â”‚  â”‚   1. pullChanges(mwServer: unknown, lastModifiedMarker: number, batchSize: number): Record[]
â”‚  â”‚      â„¹ Fetches records â‰¥ lastModifiedMarker (up to batchSize) from mwServer
â”‚  â”‚   2. commit(mwBranch: MWBranch, delta: Record[]): MWBranch
â”‚  â”‚      â„¹ Appends new records (delta) to mwBranch
â”‚  â”‚   3. lastModifiedInDelta(delta: Record[]): number
â”‚  â”‚      â„¹ Finds the highest timestamp in delta
â”‚  â”‚   4. batchedPull(mwBranch: MWBranch, lastModifiedMarker: number, batchSize: number): [MWBranch, number]
â”‚  â”‚      â„¹ Loops pullChanges until no more records, updates mwBranch and lastModifiedMarker
â”‚  â”œâ”€ ðŸ“„ read-process.ts
â”‚  â”‚   â„¹ Implements suspended/resumed polling for continuous pulling
â”‚  â”‚   1. startReadProcess(mwBranch: MWBranch, lastModMarker: number, batchSize: number, pollInterval: number): Promise<void>
â”‚  â”‚      â„¹ Repeatedly calls batchedPull, waits pollInterval, stops if suspended
â”‚  â”‚   2. suspendPolling(): void
â”‚  â”‚      â„¹ Signals polling to stop safely
â”‚  â”‚   3. resumePolling(): void
â”‚  â”‚      â„¹ Resumes polling process if suspended
â”‚  â”œâ”€ ðŸ“„ write-process.ts
â”‚  â”‚   â„¹ Pushes new commits from chgBranch to MoneyWorks, handles collisions
â”‚  â”‚   1. deltaRecords(branchA: MWBranch, branchB: MWBranch): Record[]
â”‚  â”‚      â„¹ Returns records in branchA that differ from branchB
â”‚  â”‚   2. importDelta(delta: Record[], mwServer: unknown): void
â”‚  â”‚      â„¹ Pushes delta to mwServer, halts on conflicts
â”‚  â”‚   3. triggerWriteProcess(chgBranch: MWBranch, mwBranch: MWBranch, lastModMarker: number, batchSize: number): Promise<void>
â”‚  â”‚      â„¹ Suspends polling, pulls latest from MoneyWorks, imports delta, checks for mismatch, resumes polling
â”‚  â”‚   4. restartReadProcess(): void
â”‚  â”‚      â„¹ Signals the read process to restart after write completes
â”‚  â”œâ”€ ðŸ“„ cli.ts
â”‚  â”‚   â„¹ Deno CLI entry point for moneyworks-sync
â”‚  â”‚   1. runCLI(args: string[]): Promise<void>
â”‚  â”‚      â„¹ Parses environment variables, prompts for missing data, starts continuous sync loop
â”‚  â”œâ”€ ðŸ“„ config.ts
â”‚  â”‚   â„¹ Centralized environment configuration
â”‚  â”‚   1. getConfig(): { mwUrl: string; gitRepoUrl: string; gitRepoKey: string }
â”‚  â”‚      â„¹ Retrieves and validates environment variables, prompts if missing
â”‚  â”œâ”€ ðŸ“„ anonymize.ts
â”‚  â”‚   â„¹ Optional data masking script for testing/demo
â”‚  â”‚   1. anonymizeRecords(records: Record[]): Record[]
â”‚  â”‚      â„¹ Replaces sensitive data fields with placeholders
â”‚
â”œâ”€ ðŸ“‚ tests
â”‚  â”œâ”€ ðŸ“„ batched-pull.test.ts
â”‚  â”‚   â„¹ Tests batched-pull.ts functionality
â”‚  â”‚   1. Pulls records in correct batches
â”‚  â”‚   2. Commits new delta accurately
â”‚  â”œâ”€ ðŸ“„ read-process.test.ts
â”‚  â”‚   â„¹ Tests read-process.ts polling flow
â”‚  â”‚   1. Starts and suspends polling as expected
â”‚  â”‚   2. Resumes polling and pulls new data
â”‚  â”œâ”€ ðŸ“„ write-process.test.ts
â”‚  â”‚   â„¹ Tests write-process.ts logic
â”‚  â”‚   1. Pushes deltas without collision
â”‚  â”‚   2. Detects mismatch errors
â”‚  â”œâ”€ ðŸ“„ cli.test.ts
â”‚  â”‚   â„¹ Tests the CLI entry logic
â”‚  â”‚   1. Prompts for environment variables when missing
â”‚  â”‚   2. Launches continuous sync loop successfully
â”‚
â”œâ”€ ðŸ“„ README.md
â”‚   â„¹ High-level overview and usage info
â”‚   1. Overview
â”‚   â”‚  â„¹ Summarizes continuous sync between MoneyWorks and Git
â”‚   2. Installation
â”‚   â”‚  â„¹ Deno install instructions
â”‚   3. Running the CLI
â”‚      â„¹ How the module executes and loops
â”‚
â”œâ”€ ðŸ“„ SPEC.md
â”‚   â„¹ Canonical reference for the sync logic
â”‚   1. Sync Steps
â”‚   â”‚  â„¹ Exact definitions of batch pulling, collisions, etc.
â”‚   2. Conflict Handling
â”‚      â„¹ Describes error logging and operator resolution
â”‚
â”œâ”€ ðŸ“‚ vendor-docs
â”‚  â„¹ External documentation
â”‚  â””â”€ ðŸ“„ moneyworks/
â”‚     â„¹ Docs for the MoneyWorks REST API and database schema
â””â”€ ðŸ“‚ dependencies
   
