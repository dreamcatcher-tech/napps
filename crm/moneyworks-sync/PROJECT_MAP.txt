ðŸ“¦ moneyworks-sync/
â”œâ”€ ðŸ“„ README.md
â”‚   â„¹ High-level module overview and usage
â”‚   1. # MoneyWorks XML Git Sync
â”‚   2. ## Overview
â”‚   3. ## High-Level Flow
â”‚   4. ## CLI Usage
â”‚   5. ## Anonymization
â”‚   6. ## Future Enhancements
â”œâ”€ ðŸ“„ seed.md
â”‚   â„¹ Requirements and extended goals for this module
â”‚   1. # Overview
â”‚   2. # Requirements
â”‚   3. # Questions
â”œâ”€ ðŸ“„ process.md
â”‚   â„¹ Explains flow for `moneyworks` and `changes` branches
â”‚   1. # Process Overview
â”‚   2. ## 1. MoneyWorks Branch
â”‚   3. ## 2. Changes Branch
â”‚   4. ## 3. Synchronizing Changes Branch to MoneyWorks
â”‚   5. ## 4. Verification
â”‚   6. ## 5. Completion
â”œâ”€ ðŸ“„ anonymize.ts
â”‚   â„¹ CLI tool for local XML data randomization
â”‚   1. readXML(filename?: string): Promise<string>
â”‚      â„¹ Reads XML from file or stdin
â”‚   2. main(): Promise<void>
â”‚      â„¹ Parses, anonymizes, prints to stdout
â”œâ”€ ðŸ“„ cli.ts
â”‚   â„¹ Defines CLI commands and entry logic
â”‚   1. program.action(): Promise<void>
â”‚      â„¹ Prompts for env config, calls sync
â”œâ”€ ðŸ“„ config.ts
â”‚   â„¹ Configuration interface for server/poll intervals
â”‚   1. interface Config 
â”‚      â„¹ moneyworks, tables, pollInterval
â”œâ”€ ðŸ“„ mod.ts
â”‚   â„¹ Main module entry point (placeholder)
â”œâ”€ ðŸ“„ deno.json
â”‚   â„¹ Deno config & CLI task
â”‚   1. tasks.cli 
â”‚      â„¹ `deno run` for syncing
â”œâ”€ ðŸ“„ mock-moneyworks.ts
â”‚   â„¹ Simple mock MoneyWorks server for testing
â”‚   1. startMockServer(port: number): Promise<void>
â”‚      â„¹ Spins up a mock REST server with minimal data
â”‚   2. stopMockServer(): Promise<void>
â”‚      â„¹ Cleans up the mock server after tests
â”œâ”€ ðŸ“„ sync.ts
â”‚   â„¹ Core sync logic for polling and applying updates
â”‚   1. syncMoneyWorks(): Promise<void>
â”‚      â„¹ Main orchestration: fetch from MoneyWorks, push/pull git updates
â”œâ”€ ðŸ“„ git-ops.ts
â”‚   â„¹ Git integration for push/pull, merge, and conflict detection
â”‚   1. cloneOrPullRepo(repoUrl: string): Promise<void>
â”‚      â„¹ Ensures local git repo is up to date
â”‚   2. checkoutBranch(branchName: string): Promise<void>
â”‚      â„¹ Switches to the specified branch
â”‚   3. mergeBranches(src: string, dest: string): Promise<boolean>
â”‚      â„¹ Attempts a merge, returns success or conflict
â”œâ”€ ðŸ“‚ tests
â”‚   â„¹ Integration and unit tests
â”‚   â”œâ”€ ðŸ“„ sync_test.ts
â”‚   â”‚   â„¹ Tests syncMoneyWorks() with a mock server
â”‚   â”‚   1. testSyncRetrievesUpdatesCorrectly()
â”‚   â”‚      â„¹ Ensures polling logic fetches new records
â”‚   â”‚   2. testSyncAppliesChangesToMoneyWorks()
â”‚   â”‚      â„¹ Verifies local changes are pushed back
â”‚   â”œâ”€ ðŸ“„ mock_moneyworks_test.ts
â”‚   â”‚   â„¹ Tests the mock server logic
â”‚   â”‚   1. testMockServerGetRecords()
â”‚   â”‚      â„¹ Checks basic GET responses from the mock server
â”‚   â”‚   2. testMockServerPostUpdates()
â”‚   â”‚      â„¹ Confirms POST handling simulates MoneyWorks behavior
â”‚   â””â”€ ðŸ“„ git_ops_test.ts
â”‚       â„¹ Ensures git-ops functions work as intended
â”‚       1. testCloneOrPullRepo()
â”‚          â„¹ Verifies repo is cloned/pulled correctly
â”‚       2. testMergeBranchesNoConflict()
â”‚          â„¹ Merges branches when no conflicts exist
â”‚       3. testMergeBranchesWithConflict()
â”‚          â„¹ Detects conflict scenario
â”œâ”€ ðŸ“‚ vendor-docs
â”‚   â„¹ External MoneyWorks documentation (no internal details)
