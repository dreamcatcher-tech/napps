ðŸ“¦ moneyworks-sync/
â”œâ”€ ðŸ“„ README.md
â”‚   â„¹ High-level module overview and usage
â”‚   1. # MoneyWorks XML Git Sync
â”‚   2. ## Overview
â”‚   3. ## High-Level Flow
â”‚   4. ## CLI Usage
â”‚   5. ## Anonymization
â”‚   6. ## Future Enhancements
â”œâ”€ ðŸ“„ process.md
â”‚   â„¹ Outlines the server-based flow:
â”‚      1. The module polls MoneyWorks server â†’ commits diffs into `moneyworks`.
â”‚      2. `changes` branch is read; edits go to MoneyWorks server only.
â”‚      3. Next poll picks up new server state â†’ commits to `moneyworks`.
â”‚   1. # Process Overview
â”‚   2. ## 1. MoneyWorks Branch (Only updated by this module)
â”‚   3. ## 2. Changes Branch (Module reads, then applies changes to server)
â”‚   4. ## 3. Synchronizing Changes to MoneyWorks (via server)
â”‚   5. ## 4. Verification
â”‚   6. ## 5. Completion
â”œâ”€ ðŸ“„ seed.md
â”‚   â„¹ Requirements and extended goals
â”‚   1. # Overview
â”‚   2. # Requirements
â”‚   3. # Questions
â”œâ”€ ðŸ“„ issues.md
â”‚   â„¹ Validation and logging concerns
â”‚   1. moneyworks secure url should be checked...
â”‚   2. git repo url should be correct format...
â”‚   3. git repo key should be checked...
â”‚   4. app should log out the config...
â”œâ”€ ðŸ“„ anonymize.ts
â”‚   â„¹ CLI tool for local XML data randomization
â”‚   1. readXML(filename?: string): Promise<string>
â”‚      â„¹ Reads XML from a file or stdin
â”‚   2. main(): Promise<void>
â”‚      â„¹ Randomizes sensitive fields, outputs to stdout
â”œâ”€ ðŸ“„ cli.ts
â”‚   â„¹ Defines CLI commands and top-level sync logic
â”‚   1. program.action(): Promise<void>
â”‚      â„¹ Prompts for env config, triggers entire sync
â”œâ”€ ðŸ“„ config.ts
â”‚   â„¹ Configuration interface (server URL, poll intervals, etc.)
â”‚   1. interface Config
â”‚      â„¹ moneyworks, tables, pollInterval, etc.
â”œâ”€ ðŸ“„ mod.ts
â”‚   â„¹ Main module entry point (placeholder)
â”œâ”€ ðŸ“‚ services
â”‚  â„¹ Core sync logic: only this module can update `moneyworks`
â”‚  â”œâ”€ ðŸ“„ polling-service.ts
â”‚  â”‚   â„¹ Periodically fetches new data from MoneyWorks server
â”‚  â”‚   1. startPolling(config: Config): Promise<void>
â”‚  â”‚      â„¹ Loops on a timer, calls server and detects changes
â”‚  â”‚   2. stopPolling(): void
â”‚  â”‚      â„¹ Halts polling
â”‚  â”œâ”€ ðŸ“„ changes-applier.ts
â”‚  â”‚   â„¹ Reads data from `changes` branch, applies to MoneyWorks server
â”‚  â”‚   1. applyChanges(xmlRecords: Record<string, unknown>[]): Promise<void>
â”‚  â”‚      â„¹ Posts new/updated records to the server
â”‚  â””â”€ ðŸ“„ moneyworks-sync.ts
â”‚      â„¹ Commits server-fetched data to `moneyworks` branch
â”‚      1. syncServerToMoneyworks(): Promise<void>
â”‚         â„¹ Polls the server, detects diffs, commits them to `moneyworks`
â”œâ”€ ðŸ“‚ mock
â”‚  â„¹ Mocks for local testing
â”‚  â”œâ”€ ðŸ“„ mock-moneyworks-server.ts
â”‚  â”‚   â„¹ Simulates MoneyWorks REST endpoints
â”‚  â”‚   1. mockRestEndpoint(): void
â”‚  â”‚      â„¹ In-memory MoneyWorks API
â”‚  â””â”€ ðŸ“„ mock-git-repo.ts
â”‚      â„¹ Fake local Git logic
â”‚      1. mockCommit(message: string): void
â”‚         â„¹ In-memory commit simulation
â”œâ”€ ðŸ“‚ tests
â”‚  â„¹ Unit and integration tests
â”‚  â”œâ”€ ðŸ“„ polling-service.test.ts
â”‚  â”‚   â„¹ Tests that polling fetches server data
â”‚  â”‚   1. Polling begins with valid config
â”‚  â”‚   2. Polling stops immediately on command
â”‚  â”œâ”€ ðŸ“„ changes-applier.test.ts
â”‚  â”‚   â„¹ Tests sending `changes` branch data up to the server
â”‚  â”‚   1. Applies valid XML records successfully
â”‚  â”‚   2. Detects conflict scenario properly
â”‚  â””â”€ ðŸ“„ moneyworks-sync.test.ts
â”‚      â„¹ Verifies commits from server state into `moneyworks`
â”‚      1. Syncs new server data into `moneyworks`
â”‚      2. Skips commit if no changes
â”œâ”€ ðŸ“‚ vendor-docs
â”‚  â„¹ External MoneyWorks documentation
â””â”€ ðŸ“‚ dependencies
   â”œâ”€ ðŸ“¦ deno-dom
   â”‚   â„¹ HTML/XML DOM library
   â”œâ”€ ðŸ“¦ commander
   â”‚   â„¹ CLI argument parsing
   â””â”€ ðŸ§© @dreamcatcher/helpers
       â„¹ Shared helper library
